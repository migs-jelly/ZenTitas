//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Domains.Global.SubDomains.Game.Code.Data.Game.GameState gameState { get { return (Domains.Global.SubDomains.Game.Code.Data.Game.GameState)GetComponent(GameComponentsLookup.GameState); } }
    public bool hasGameState { get { return HasComponent(GameComponentsLookup.GameState); } }

    public void AddGameState(bool newIsRunning) {
        var index = GameComponentsLookup.GameState;
        var component = (Domains.Global.SubDomains.Game.Code.Data.Game.GameState)CreateComponent(index, typeof(Domains.Global.SubDomains.Game.Code.Data.Game.GameState));
        component.IsRunning = newIsRunning;
        AddComponent(index, component);
    }

    public void ReplaceGameState(bool newIsRunning) {
        var index = GameComponentsLookup.GameState;
        var component = (Domains.Global.SubDomains.Game.Code.Data.Game.GameState)CreateComponent(index, typeof(Domains.Global.SubDomains.Game.Code.Data.Game.GameState));
        component.IsRunning = newIsRunning;
        ReplaceComponent(index, component);
    }

    public void RemoveGameState() {
        RemoveComponent(GameComponentsLookup.GameState);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherGameState;

    public static Entitas.IMatcher<GameEntity> GameState {
        get {
            if (_matcherGameState == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.GameState);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherGameState = matcher;
            }

            return _matcherGameState;
        }
    }
}
